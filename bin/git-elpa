#!/usr/bin/env ruby
# frozen_string_literal: true

# Git Elpa
# ========
#
# This module is used to simplify updating Emacs ELPA packages.
#
# In a nutshell, within Emacs you would update/modify your ELPA/MELPA packages
#
# Then use this script to: 
# - list names of packages which have been updated/added/deleted
# - create commits for each package change
#   - by all
#   - by a single named package
#
# Abstract
# ========
#
# In this Emacs config, unlike most, I maintain a repository history of
# the ELPA packages I install. Usually (99% of the time over many years
# so far) I have no issues with this at all.  Of course, hypothetically,
# it's quite possible that any feature of any package could be broken at
# any time.
#
# In case a breakage occurs, it's possible to roll back to a previous
# version of that package, and it's easy to do when we can identify the
# package. We can simply cherry-pick it from a previous commit, or just
# grab it from it's canonical source.
#
# However, if the breakage manifests as a side-effect, identifying
# the problem package is much harder.
#
# To this end, I wrote this script to make each package have it's own
# commit history, (starting today!)
#
# Usage:
# ======
#
#     git-elpa --list
#
# or
#
#     git-elpa -l
#
# List all updated packages, not yet committed.
#
#     git-elpa --commit=package-name
#
# or
#
#     git-elpa -c package-name
#
# Commit the package update (and old version removal). The following
# automatic commit message pattern will be used:
#
# "[package-name upgraded] to NEW_VERSION from OLD_VERSION"
#
#     git-elpa --all
#
# or
#
#     git-elpa -a
#
# Commit all updated packages (as individual commits)
#
#     git-elpa --cleanup
#
# Remove all stray package info .txt files (created when viewing package details)
#

require 'optparse'

BANNER = <<EOD
Emacs ELPA package commit tool

This tool is designed to assist the storage of your installed ELPA packages.
It will commit each package separately.

Please note: it is assumed you are actually performing the package updates with Emacs.

Usage: git-elpa [options]
EOD

ANSI_RESET = "\x1b[0m"
ANSI_COMMAND_LOG = "\x1b[36m"
ANSI_MESSAGE = "\x1b[32m"
ANSI_WARNING = "\x1b[33m"
ANSI_ERROR = "\x1b[31m"

NO_UPDATES = "#{ANSI_WARNING}There are no updated packages / no commits required#{ANSI_RESET}"

def log(str)
  puts "#{ANSI_MESSAGE}#{str}#{ANSI_RESET}"
end

def log_warning(str)
  puts "#{ANSI_WARNING}#{str}#{ANSI_RESET}"
end

def log_error(str)
  puts "#{ANSI_WARNING}#{str}#{ANSI_RESET}"
end

def log_cmd(str)
  puts "#{ANSI_COMMAND_LOG}#{str}#{ANSI_RESET}"
  `#{str}`
end

class GitElpa
  EMACS_D = File.join(Dir.home, '.emacs.d')

  def initialize
  end

  def shellescape(str)
    str.gsub(%r{([^A-Za-z0-9_\-+.,:\/@\n]+)}) { Regexp.last_match(1) }
  end

  def updatable_files_from_git_status
    `git status -s |
          grep -P -o '^( D | A |[?]{2} )elpa/.*?(\.signed$|/)' |
          uniq`.split("\n")
  end

  def updated_packages
    package_name = Regexp.new('^(.*)-.*?$')
    updatable = updatable_files_from_git_status.map { |name| name[8..name.length] }
    updated_names = updatable.map { |u| package_name.match(u).to_a[1] rescue nil }.uniq.compact.sort
    abort if updated_names.empty?
    updated_names
  end

  def commit_all_packages
    updated_packages.each do |p|
      commit_package p
    end
  end

  def commit_package(package, do_commit = true)
    @package = package
    @rx = Regexp.new("(^elpa/)(#{Regexp.quote(@package)})-([^-]*?)(\.signed$|/)")
    @old = old_versions
    @ver = new_version
    commit if do_commit
  end

  def pluralise(word, amount)
    # The world's most minimalistic English pluralisation engine.
    word + (amount > 1 ? 's' : '')
  end

  def remove_package_message(versions_label)
    "[Removing #{@package} #{versions_label}: #{@old.join(',')}]"
  end

  def updating_new_and_remove_old_package_message(versions_label)
    "[Updating #{@package} version: #{@ver}][removing old #{versions_label}: #{@old.join(',')}]"
  end

  def adding_new_package_message
    "[Adding #{@package} version: #{@ver}]"
  end

  def generate_commit_message
    versions_label = pluralise('version', @old.length) if @old && @old.length > 0
    return remove_package_message(versions_label) if @ver.nil? && @old.length > 0
    return updating_new_and_remove_old_package_message(versions_label) if @old.length > 0
    return adding_new_package_message if @old.length.zero?
  end

  def add_to_index
    new_version_files.each do |file|
      log_cmd %(git add "#{shellescape file}")
    end unless @ver.nil?
    old_version_files.each do |file|
      log_cmd %(git rm -rf "#{shellescape file}")
    end unless @old.empty?
  end

  def commit(message = generate_commit_message)
    add_to_index
    log message
    `git commit -m "#{message}"`
  end

  def new_version
    versions = new_version_files.map { |f| @rx.match(f)[3] }.uniq
    if versions.length > 1
      abort "#{ANSI_WARNING}There are more than one new versions of #{@package}#{ANSI_RESET}"
    end
    versions.first
  end

  def old_versions
    old_version_files.map { |f| @rx.match(f)[3] }.uniq
  end

  def cleanup_version_file_names(list)
    list.map { |f| f.gsub(%r{^.{3}elpa/}, '') }.select { |f| f != '' }
  end

  def filter_version_files(status_rx)
    cleanup_version_file_names updatable_files_from_git_status
      .select { |file| status_rx.match file }
      .map { |file| file.gsub status_rx, '' }
      .select { |f| @rx.match(f) }
  end

  def new_version_files
    status_rx = /^( A |[?]{2} )/
    filter_version_files status_rx
  end

  def old_version_files
    status_rx = /^( D )/
    filter_version_files status_rx
  end

  def commit_archives
    log_cmd %(git add elpa/archives)
    `git commit -m "Updating elpa archives"`
  end
end

option_parser = OptionParser.new do |opts|
  elpa = GitElpa.new
  opts.banner = BANNER

  opts.on '-l', '--list', 'List updated packages' do
    log 'Listing updated ELPA packages...(to be committed)'
    puts elpa.updated_packages
    exit 0
  end

  opts.on '-cPACKAGE', '--commit=PACKAGE', 'Commit a new/updated elpa package' do |package|
    elpa.commit_package package
    exit 0
  end

  opts.on '-A', '--all', 'Commit all updated elpa packages (as individual commits)' do
    puts <<-EOD.gsub(/^ */, '')
        #{ANSI_MESSAGE}Commit all updated packages
        Current commit (for reset): #{ANSI_COMMAND_LOG}#{`git log --pretty=oneline -1`}#{ANSI_RESET}
    EOD
    elpa.commit_all_packages
    exit 0
  end

  opts.on '-e', '--elpa-archive', 'Commit updated elpa/melpa archive index' do
    elpa.commit_archives
    exit 0
  end

  opts.on '-C', '--cleanup', 'Cleanup stray elpa txt files' do
    puts 'Cleaning out elpa .txt files'
    unwanted_text_files_pattern = File.join ENV['HOME'], 'emacs.d', 'elpa', '*.txt'
    if Dir.glob(unwanted_text_files_pattern).empty?
      puts 'There are no unwanted .txt files in elpa.'
    else
      Dir.glob(unwanted_text_files_pattern).each do |file|
        puts "Deleting: #{file}"
        File.delete file
      end
    end
    puts 'done'
    exit 0
  end

  opts.on '-R', '--reset-custom', 'Reset custom.el' do
    puts 'resetting custom.el'
    `cd "$HOME/.emacs.d"; git checkout custom/custom.el`
    puts 'done'
    exit 0
  end
end

option_parser.parse!

puts option_parser
